/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * clientframe.java
 *
 * Created on Mar 28, 2009, 10:16:23 AM
 */
package p2pclient;

import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import p2p.*;
import java.util.Map;

/**
 *
 * @author GAGAN
 */
public class clientframe extends javax.swing.JFrame {

    Socket client;
    InputStream instream;
    OutputStream outstream;
    ObjectOutputStream obout;
    ObjectInputStream obin;
    PrintWriter outwriter;
    static List<File> files;
    static List<String> filesname;

    public static byte[] toBytes(Object object) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos;
        try {
            oos = new ObjectOutputStream(baos);
            oos.writeObject(object);
        } catch (IOException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        return baos.toByteArray();
    }

    public static Object toObject(byte[] bytes) {
        Object object = null;
        try {
            object = new ObjectInputStream(new ByteArrayInputStream(bytes)).readObject();
        } catch (IOException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        return object;
    }

    /** Creates new form clientframe */
    public clientframe() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("P2P Client");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sign in");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "MD5", "ARTIST", "ALBUM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton1.setText("Unshare Folder");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Add Folder For Sharing");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField2.setText("search...");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton4.setText("Download Now!");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Search");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton5MouseReleased(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(51, 153, 255));
        jLabel1.setText("Codename P2P File Sharing App - by Gagan & Anurag");

        jButton6.setText("Scan Shared Folder");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PATH", "NAME"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jLabel2.setText("Search Results");

        jLabel3.setText("Shared Folders");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap(28, Short.MAX_VALUE))
        );

	/* Making the column "MD5" of "jTable1" invisible */
	/* Idea: http://www.experts-exchange.com/Programming/Languages/Java/Q_20394392.html */
	int iColumn = 1;
	// set column width
	jTable1.getColumnModel().getColumn(iColumn).setMaxWidth(0);
	jTable1.getColumnModel().getColumn(iColumn).setMinWidth(0);
	// set column header width (to avoid the ... sign)
	jTable1.getTableHeader().getColumnModel().getColumn(iColumn).setMaxWidth(0);
	jTable1.getTableHeader().getColumnModel().getColumn(iColumn).setMinWidth(0);
        
	pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            client = new Socket(InetAddress.getByName(jTextField1.getText()), 4321);
            instream = client.getInputStream();
            outstream = client.getOutputStream();
            obout = new ObjectOutputStream(outstream);
            obin = new ObjectInputStream(instream);
        } catch (IOException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        files = new ArrayList<File>();
        filesname = new ArrayList<String>();
        outwriter = new PrintWriter(new OutputStreamWriter(outstream), true);
        jTextField1.setEditable(false);
        new file_transferthread().start();
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int selected;
            selected = jTable2.getSelectedRow();
            if (selected != -1) {
                //JOptionPane.showMessageDialog(null, jTable2.getSelectedRow());
                files.remove(jTable2.getSelectedRow());
                filesname.remove(jTable2.getSelectedRow());
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                //add info to server
                try {
                    outstream.write((byte) 1);
                    outstream.flush();
                    //outwriter.flush();
                    byte bytearray[] = toBytes(this.filesname);
                    int size = bytearray.length;
                    obout.writeInt(size);
                    obout.flush();
                    outstream.write(bytearray);
                    outstream.flush();
                } catch (IOException ex) {
                    Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
                }
                model.removeRow(jTable2.getSelectedRow());
            }
        }
        catch(Exception e) {
             System.out.println("Please select a folder to unshare.");
        }
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fc = new JFileChooser();
        // We set the selection mode for file chooser to directory only. Help from:
        // http://www.experts-exchange.com/Programming/Languages/Java/Q_20511213.html
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.showOpenDialog(fc);
        File selected = fc.getSelectedFile();
        if (selected != null) {
            files.add(selected);
            filesname.add(selected.getName());
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            //jTable2.setModel(model);


            try {
                outstream.write((byte) 1);
                outstream.flush();
                byte bytearray[] = toBytes(this.filesname);
                int size = bytearray.length;
                obout.writeInt(size);
                obout.flush();
                outstream.write(bytearray);
                outstream.flush();
            } catch (IOException ex) {
                Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
            }


            model.addRow(new Object[]{selected.getAbsolutePath(), selected.getName()});
        }
    // TODO add your handling code here:
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String myFileMD5, myFileName;
        int selectedRow;
        selectedRow = jTable1.getSelectedRow();
        // The column argument is 1 because we have specified file MD5 in the second column; so, this can change in future
        myFileMD5 = jTable1.getValueAt(selectedRow, 1).toString();
        // The column argument is 0 because we have specified file name in the first column; so, this can change in future
        myFileName = jTable1.getValueAt(selectedRow, 0).toString();
        System.out.println("Downloading file: " + myFileName);
        try {
            outstream.write((byte) 2);
            outstream.flush();
        } catch (IOException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte bytearray[] = toBytes(myFileMD5);
        int size = bytearray.length;
        try {
            obout.writeInt(size);
            obout.flush();
            outstream.write(bytearray);
            outstream.flush();
        } catch (IOException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        bytearray = null;
        try {
            size = obin.readInt();
        } catch (IOException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        bytearray = new byte[size];
        try {
            instream.read(bytearray);
        } catch (IOException ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        Map<InetAddress,String> result = null;
        result = (Map<InetAddress,String>) toObject(bytearray);
        // Idea: http://www.faqs.org/docs/javap/c12/s3.html
        Set entries = result.entrySet();
        Iterator entryIter = entries.iterator();
        System.out.println("result is recieved");
        if (entryIter.hasNext()) {
            System.out.println("result is not empty");
            boolean downloaded = false;
            Object key, value;
            InetAddress peerIP;
            String filePath;
            while ((!downloaded) && (entryIter.hasNext())) {
                Map.Entry entry = (Map.Entry)entryIter.next();
                key = entry.getKey();
                value = entry.getValue();
                peerIP = (InetAddress) key;
                filePath = (String) value;
                File downfile = new File(myFileName);
                Socket clientconnection = null;
                try {
                    clientconnection = new Socket(peerIP, 5555);
                } catch (IOException ex) {
                    Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
                }
                OutputStream outout = null;
                InputStream inin = null;
                BufferedOutputStream buffout = null;
                ObjectOutputStream oboutout;
                byte[] buffer = new byte[1024];
                try {
                    inin = clientconnection.getInputStream();
                    outout = clientconnection.getOutputStream();
                    oboutout = new ObjectOutputStream(outout);
                    bytearray = toBytes(filePath);
                    size = bytearray.length;
                    oboutout.writeInt(size);
                    oboutout.flush();
                    outout.write(bytearray);
                    outout.flush();
                } catch (IOException ex) {
                    Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    buffout = new BufferedOutputStream(new FileOutputStream(downfile));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
                }
                int num;
                System.out.println("starting download");
                try {
                    while ((num = inin.read(buffer)) != -1) {
                        buffout.write(buffer, 0, num);
                    }
                    System.out.println("file downloaded");
                    downloaded = true;
                } catch (IOException ex) {
                    Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
                }


                try {
                    buffout.close();
                    inin.close();
                    outout.close();
                } catch (IOException ex) {
                    Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else {
            System.out.println("no peer found");
        }
        jTextField2.setEditable(true);
        jTextField2.setText("search...");

    }//GEN-LAST:event_jButton4ActionPerformed

private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jTextField1ActionPerformed

private void displaySearchResult() {
    String[] row;
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setNumRows(0);
    SearchDB obj = new SearchDB(jTextField2.getText());
    @SuppressWarnings("static-access")
    ArrayList<String> result = obj.performSearch();
    for(int i=0; i<result.size(); i++) {
        row = result.get(i).split(":");
        model.addRow(row);    
    }
}

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
    displaySearchResult();
}//GEN-LAST:event_jButton5ActionPerformed

private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
// TODO add your handling code here:
    displaySearchResult();
}//GEN-LAST:event_jTextField2ActionPerformed

private void jButton5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseReleased
// TODO add your handling code here:
}//GEN-LAST:event_jButton5MouseReleased

private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
    try {
        jButton6.setEnabled(false);
        jButton6.setText("Processing...");
        int selectedRow;
        String sharedFolderPath;
        selectedRow = jTable2.getSelectedRow();
        // The column argument is zero because we have specified path in the first column; so, this can change in future
        sharedFolderPath = jTable2.getValueAt(selectedRow, 0).toString();
        PostToFile p2f = new PostToFile(sharedFolderPath);
        try {
            p2f.generateFile();//GEN-LAST:event_jButton6ActionPerformed
        }
        catch (Exception ex) {
            Logger.getLogger(clientframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        jButton6.setText("Scan Shared Folder");
        jButton6.setEnabled(true);
    }
    catch(Exception e) {
        System.out.println("Please select a shared folder first.");
        jButton6.setText("Scan Shared Folder");
        jButton6.setEnabled(true);
    }
}
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
